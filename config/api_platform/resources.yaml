resources:
  App\ApiResource\User:
    shortName: 'Users'
    normalizationContext:
      groups: [ 'user:output' ]
#    collectionOperations:
#      post:
#        path: '/register'
#        openapi_context:
#          summary: 'Create an account'
#          description: 'Create an account'
#    itemOperations:
#      get: ~
    operations:
      ApiPlatform\Metadata\Get:
        provider: App\State\Provider\UserStateProvider
#        output: App\Dto\User\Output\UserOutputDto
        uriTemplate: '/users/{code}'
        security: 'is_granted("ROLE_USER")'
#      ApiPlatform\Metadata\Post:
#        processor: App\State\Processor\UserStateProcessor
#        uriTemplate: '/register'
#        openapiContext:
#          summary: 'Create an account'
#          description: 'Create an account'
#        denormalizationContext:
#          groups: [ 'user:create' ]

  App\Entity\Student:
    shortName: 'Students'
    normalizationContext:
      groups: ['student:output']
    denormalizationContext:
      groups: ['student:input']

  App\Entity\Supervisor:
    shortName: 'Supervisors'
    normalizationContext:
      groups: [ 'supervisor:output' ]
    denormalizationContext:
      groups: [ 'supervisor:input' ]

  App\Entity\MediaObject:
    normalizationContext:
      groups: ['media_object:output'],
    types: ['https://schema.org/MediaObject']
    operations:
      ApiPlatform\Metadata\Post:
        security: 'is_granted("ROLE_ADMIN")'
        processor: App\State\Processor\MediaObjectStateProcessor
#        controller: App\Controller\CreateMediaObjectAction
#        deserialize: false
        validationContext:
          groups: ['Default', 'media_object:input']]
        openapiContext:
          requestBody:
            content:
              multipart/form-data:
                schema:
                  type: object
                  properties:
                    file:
                      type: string
                      format: binary

  App\Entity\Department:
    normalizationContext:
      groups: ['department:output']
    denormalizationContext:
      groups: ['department:input']
    operations:
      ApiPlatform\Metadata\Get:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\GetCollection:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Post:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Put:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Delete:
        security: 'is_granted("ROLE_ADMIN")'

  App\Entity\Specialization:
    normalizationContext:
      groups: [ 'specialization:output' ]
    denormalizationContext:
      groups: [ 'specialization:create' ]
    operations:
      ApiPlatform\Metadata\Post:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Put:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Delete:
        security: 'is_granted("ROLE_ADMIN")'

  App\Entity\SupervisoryPlan:
    normalizationContext:
      groups: [ 'plan:output' ]
    denormalizationContext:
      groups: [ 'plan:input' ]
    operations:
      ApiPlatform\Metadata\Get: ~
      ApiPlatform\Metadata\GetCollection: ~
      ApiPlatform\Metadata\Patch:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Delete:
        security: 'is_granted("ROLE_ADMIN")'

  App\Entity\ScoreWeight:
    operations:
      ApiPlatform\Metadata\Get: ~
      ApiPlatform\Metadata\GetCollection:
        filters: ['system_variable.search_filter']
      ApiPlatform\Metadata\Post:
        class: ApiPlatform\Metadata\Post
        method: POST
        uriTemplate: /score-weights/update-multiple
        controller: App\Controller\UpdateScoreWeightsController
        input: App\Dto\ScoreWeight\Input\ScoreWeightDto
        output: App\Dto\ScoreWeight\Output\ScoreWeightsDto
        security: 'is_granted("ROLE_ADMIN")'
        openapiContext:
          summary: 'Update multiple weights'
          description: 'Update multiple weights'