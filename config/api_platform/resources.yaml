resources:
  App\ApiResource\User:
    shortName: 'Users'
    normalizationContext:
      groups: [ 'user:output' ]
    operations:
      ApiPlatform\Metadata\Get:
        provider: App\State\Provider\UserStateProvider
        uriTemplate: '/users/{code}'
        security: 'is_granted("ROLE_USER")'

  App\Entity\Student:
    shortName: 'Students'
    operations:
      ApiPlatform\Metadata\GetCollection:
        provider: App\State\Provider\StudentsStateProvider
        output: App\Dto\Student\Output\StudentDto
        filters: [ 'student.search_filter' ]
        security: 'is_granted("ROLE_ADMIN")||is_granted("ROLE_TEACHER")'

  App\Entity\Supervisor:
    shortName: 'Supervisors'
    operations:
      ApiPlatform\Metadata\GetCollection:
        provider: App\State\Provider\SupervisorsStateProvider
        output: App\Dto\Supervisor\Output\SupervisorDto
        security: 'is_granted("ROLE_ADMIN")||is_granted("ROLE_STUDENT")'

  App\Entity\StudentImportFile:
    normalizationContext:
      groups: ['student_import_file:output'],
    types: ['https://schema.org/MediaObject']
    operations:
      ApiPlatform\Metadata\Post:
        security: 'is_granted("ROLE_ADMIN")'
        processor: App\State\Processor\StudentImportFileStateProcessor
        validationContext:
          groups: ['Default', 'student_import_file:input']]
        openapiContext:
          requestBody:
            content:
              multipart/form-data:
                schema:
                  type: object
                  properties:
                    file:
                      type: string
                      format: binary

  App\Entity\SupervisorImportFile:
    normalizationContext:
      groups: [ 'supervisor_import_file:output' ],
    types: [ 'https://schema.org/MediaObject' ]
    operations:
      ApiPlatform\Metadata\Post:
        security: 'is_granted("ROLE_ADMIN")'
        processor: App\State\Processor\StudentImportFileStateProcessor
        validationContext:
          groups: [ 'Default', 'supervisor_import_file:input' ] ]
        openapiContext:
          requestBody:
            content:
              multipart/form-data:
                schema:
                  type: object
                  properties:
                    file:
                      type: string
                      format: binary

  App\Entity\Department:
    normalizationContext:
      groups: ['department:output']
    denormalizationContext:
      groups: ['department:input']
    operations:
      ApiPlatform\Metadata\Get:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\GetCollection:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Post:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Put:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Delete:
        security: 'is_granted("ROLE_ADMIN")'

  App\Entity\Specialization:
    normalizationContext:
      groups: [ 'specialization:output' ]
    denormalizationContext:
      groups: [ 'specialization:create' ]
    operations:
      ApiPlatform\Metadata\Post:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Put:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Delete:
        security: 'is_granted("ROLE_ADMIN")'

  App\Entity\SupervisoryPlan:
    normalizationContext:
      groups: [ 'plan:output' ]
    denormalizationContext:
      groups: [ 'plan:input' ]
    operations:
      ApiPlatform\Metadata\Get: ~
      ApiPlatform\Metadata\GetCollection: ~
      ApiPlatform\Metadata\Patch:
        security: 'is_granted("ROLE_ADMIN")'
      ApiPlatform\Metadata\Delete:
        security: 'is_granted("ROLE_ADMIN")'

  App\Entity\ScoreWeight:
    operations:
      ApiPlatform\Metadata\Get: ~
      ApiPlatform\Metadata\GetCollection:
        filters: ['score_weight.search_filter']
      ApiPlatform\Metadata\Post:
        class: ApiPlatform\Metadata\Post
        method: POST
        uriTemplate: /score-weights/update-multiple
        controller: App\Controller\UpdateScoreWeightsController
        input: App\Dto\ScoreWeight\Input\ScoreWeightDto
        output: App\Dto\ScoreWeight\Output\ScoreWeightsDto
        security: 'is_granted("ROLE_ADMIN")'
        openapiContext:
          summary: 'Update multiple weights'
          description: 'Update multiple weights'